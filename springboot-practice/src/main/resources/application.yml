# 이 애플리케이션의 설정 파일입니다.
# 설정 파일이라는 것은 본디, 애플리케이션에서 사용되는 이런저런 데이터를
# 별도의 파일로 분리하여두고, 필요에 따라 읽어들여 사용한다고
# 우리는 application.properties가 아닌 application.yml을 사용합니다.
# 왜냐하면,
# 1. yml 파일은 가독성이 뛰어납니다.
# 공통의 속성을 중복해서 기재할 필요가 없으며, 들여쓰기로 속성을 구분하기 때문입니다.
# 2. 호환성이 뛰어납니다.
# .yml 파일은 스프링부트 뿐만 아니라 다양한 설정 파일로 사용되기도 하고,
# 쉽게 다른 프로그램에서 읽어들일 수 있기 때문입니다.
# 들여쓰기만 잘 지켜주시면 문제될 것이 전혀 없습니다.
# (들여쓰기를 지키는 가장 쉬운 방법은 탭이나 스페이스 중 하나만 통일성있게 사용하는 것입니다.)
# 기존의 application.properties에서 .으로 구분하는 부분은 들여쓰기로만 바꿔주시면 된다고 생각하시면됩니다.
# application.properties, application.yml에서 사용되는 속성은 다음을 참고해주세요.(어떤 속성에 어떤값을 사용해야하는지 모르시겠을 때)
# https://docs.spring.io/spring-boot/appendix/application-properties/index.html#application-properties.core.spring.application.name
server:
  port: 9090
spring:
  application:
    # 우리 애플리케이션 이름을 정해줍니다. 보통 스프링부트 프로젝트 생성시에 지정한 이름을 많이 사용합니다.
    name: springBootPractice
  # 여기서부터는 데이터소스라는 것의 정보를 설정하는데요,
  # 쉽게 말하면, 스프링부트라는 자바 애플리케이션에서 어디로부터 영구 보관된 데이터를 가져올지를 정하는 것입니다.
  # 주로 관계형 데이터베이스가 됩니다.
  datasource:
    # 데이터소스의 url(uniform resource location)을 지정합니다.
    # 여기서는 내 컴퓨터(로컬 pc)의 데이터베이스를 사용하기 때문에, 그에 맞는 주소를 적어준 것입니다.
    # 만약 데이터베이스가 다른 컴퓨터에 있다면, 그에 맞는 주소를 적어주면 됩니다.
    # 큰 골자는 기열샘 수업 때 배운 url의 골자와 같습니다.(기억 안나시면 필기 복습해보세요)
    # 당장 중요한 것은 여기서 맨 끝에 오는 'scit' 부분입니다.
    # 이부분이 나의 데이터베이스에 있는 스키마의 이름을 적는 곳입니다.
    # 적은 이름에 해당하는 스키마가 없다면 미리 생성을 해두어야겠죠.
    url: jdbc:mysql://localhost:3306/scit
    # 데이터베이스 계정의 이름을 적습니다. 예를 들어, 루트 유저라면 계정 정보중,
    # 이름이 root이니까 root를 적어주면되겠죠. 여기서는 root 계정을 사용합니다.
    username: root
    # 마찬가지로 해당 계정의 비밀번호를 적어주면 됩니다.
    password: root
    # 데이터베이스와 연결하기 위해서는 그에 맞는 드라이버가 필요합니다.
    # 드라이버라는 것은 원래는 외부 장치를 연결하기위해 필요한 일종의 어댑터라고 생각하시면 되는데요,
    # 여기서도 같은 개념으로 외부 시스템인 데이터베이스를 연결하기 위해 어댑터를 지정해주는 거라고 생각하시면됩니다.
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 히카리는 데이터베이스와의 연결을 안정화하는 '커넥션 풀'이라는 것의 일종입니다.
    # 예를 들면 스마트폰(커넥션 풀)이라는 카테고리의 일종으로 아이폰(히카리)가 있는 것입니다.
    # 더 설명 드릴 수도 있으나, 솔직히 초심자에게는 굉장히 어려운 개념이기 때문에,
    # 여기서는 더 설명하지 않고 넘어가겠습니다.
    # 단순히 지금은 "아래와 같은 설정을 적용한다"까지만 알고계시면 됩니다.
    hikari:
      connection-timeout: 20000
      maximum-idle: 10
      maximum-pool-size: 10
      idle-timeout: 300000
      max-lifetime: 1800000
  # 타임리프의 캐시에 대한 설정입니다.
  # 타임리프의 캐시라는 것은, 한번 브라우저에서 본 웹 페이지(html)을
  # 어딘가에 저장해두고, 다시 브라우저에서 요청했을 때 저장해둔 것을 불러와서 보여준다는 것입니다.
  # 조금 더 사용자에게 빨리 웹 페이지를 보여주기 위해 사용한다고 생각하시면 됩니다.
  thymeleaf:
    cache: false
  # '서블릿'이라는 것의 설정입니다.
  # 서블릿이라는 것은 본디 자바로 웹 서버 프로그램을 만들기 위해 고안된 개념으로,
  # 지금은 특별히 알아두실 필요가 없습니다만, 면접 준비시에는 약간 알아두는 것이 좋을지도 모릅니다.
  servlet:
    # multipart-formdata 형식의 요청이 들어왔을 때 어떻게 처리할지를 지정합니다.
    multipart:
      # 최대 파일의 사이즈를 지정합니다.
      max-file-size: 100MB
      # 최대 요청(우리가 폼 데이터로 보내는 요청)의 크기를 지정합니다.
      max-request-size: 100MB
      # 파일의 저장 위치를 지정합니다.
      location: C:/savedFiles
  # jpa의 설정을 지정합니다.
  # 여기서는 그중에서도 hibernate라는 것을 설정하는데요,
  # hibernate라는 것은 jpa라는 기술의 구현체입니다.
  # 예를 들면, 자바의 클래스와 인터페이스의 관계외 비슷합니다.
  # hibernate라는 클래스가 jpa라는 인터페이스를 구현하는 것이죠.
  jpa:
    properties:
      hibernate:
        # hibernate에서 생성하는 sql을 콘솔창에 출력할지 말지를 정합니다.
        show_sql: true
        # 출력된 sql을 보기좋게 포맷할지 말지를 결정합니다.
        format_sql: true
        # 출력한 sql을 하이라이트해서 보기 쉽게 할지 말지를 결정합니다.
        highlight_sql: true
# 로그 옵션입니다. 로그라는 것은 애플리케이션이 실행되는 동안에 실행되는 이런저런 메소드들 및
# 생성되는 클래스 등의 각종 실행의 결과를 출력하여 기록으로 남기는 것입니다.
# 로그를 잘 보존하는 것은 매우 중요합니다.
logging:
  # 로그의 레벨을 설정합니다.
  # 로그의 레벨은 trace < debug < info < warn < error 순서로 심각성이 커집니다.(우측에 있는 것일 수록 심각성이 크다)
  # 심각성이 낮은 로그일 수록, 자잘한 정보를 출력한다고 생각하시면 됩니다.
  # 즉, 심각성이 높은 로그는, 그만큼 보다 굵직하고 중요한 정보를 출력한다고 샏각하시면 됩니다.
  # 로그의 레벨을 설정한다는 것은, 설정한 레벨 이상의(심각성을 기준으로) 레벨의 로그만 보여준다는 의미입니다.
  level:
    # hibernate가 생성하는 sql 로그를 어떤 레벨로 보여줄지를 결정합니다.
    org.hibernate.SQL: debug
    # hibernate가 생성하는 sql에 포함되는 파라미터의 값과 타입을 어떤 레벨로 보여줄지를 결정합니다.
    org.hibernate.type: trace
